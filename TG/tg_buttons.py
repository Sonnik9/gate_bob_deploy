# TG/tg_interface.py
import asyncio
import copy
from typing import *

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from a_config import *
from b_context import BotContext
from c_log import ErrorHandler
from .tg_notifier import TelegramNotifier


# ============================================================
#  VALIDATION & FORMATTING
# ============================================================

def validate_user_config(user_cfg: dict) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    config = user_cfg.setdefault("config", {})
    fin = config.setdefault("fin_settings", {})

    gate = config.get("GATE", {})
    if not gate.get("api_key") or not gate.get("api_secret"):
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ç–æ–∫ soft / trading pair
    for section in ("soft", "trading pair"):
        branch = fin.get(section, {})
        if not branch:
            return False

        required_fields = {
            "margin_size": (float, int),
            "margin_mode": int,
            "order_type": int,
            "trigger_order_type": int,
            "order_timeout": int,
            # "leverage": int,
        }
        for field, allowed_types in required_fields.items():
            val = branch.get(field)
            if val in (None, "", 0):
                return False
            if not isinstance(val, allowed_types):
                return False
    return True


def format_config(cfg: dict, indent: int = 0) -> str:
    lines = []
    pad = "  " * indent

    for k, v in cfg.items():
        # –ï—Å–ª–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å ‚Äî —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        if isinstance(v, dict):
            lines.append(f"{pad}‚Ä¢ {k}:")
            lines.append(format_config(v, indent + 1))
            continue

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
        display_value = v
        if k == "dop_tp":
            display_value = v if v is not None else "–Ω–µ –∑–∞–¥–∞–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100"
        elif k == "margin_mode":
            display_value = "–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è" if v == 1 else "–ö—Ä–æ—Å—Å" if v == 2 else v
        elif k == "trigger_order_type":
            display_value = "–õ–∏–º–∏—Ç–Ω—ã–π" if v == 1 else "–†—ã–Ω–æ—á–Ω—ã–π" if v == 2 else v
        elif k == "order_type":
            display_value = "–õ–∏–º–∏—Ç–Ω—ã–π" if v == 1 else "–†—ã–Ω–æ—á–Ω—ã–π" if v == 2 else v
        elif k == "leverage":
            display_value = f"{v}x"
        elif k == "order_timeout":
            display_value = f"{v} —Å–µ–∫"
        elif isinstance(v, str) and k.lower() == "api_secret":
            display_value = f"{v[:5]}‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"  # —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª—é—á–∏

        lines.append(f"{pad}‚Ä¢ {k}: {display_value}")

    return "\n".join(lines)


# ============================================================
#  TELEGRAM UI CLASS
# ============================================================

class TelegramUserInterface:
    """
    UI-—Å–ª–æ–π. –í–ê–ñ–ù–û: –í–ï–ó–î–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∫–∞–∫ –µ–¥–∏–Ω—ã–π –∫–ª—é—á.
    –≠—Ç–æ –∏—Å–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω —Å TelegramNotifier / order_buttons_handler / context.*.
    """

    def __init__(
        self,
        bot: Bot,
        dp: Dispatcher,
        context: BotContext,
        info_handler: ErrorHandler,
        notifier: TelegramNotifier
    ):
        self.bot = bot
        self.dp = dp
        self.context = context
        self.info_handler = info_handler
        self.notifier = notifier

        self._polling_task: asyncio.Task | None = None
        self._stop_flag = False
        self.bot_iteration_lock = asyncio.Lock()

        # ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
        self.context.main_menu = types.ReplyKeyboardMarkup(
            keyboard=[
                [
                    types.KeyboardButton(text="üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                    types.KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"),
                ],
                [
                    types.KeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç"),
                    types.KeyboardButton(text="‚èπ –°—Ç–æ–ø"),
                ],
            ],
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶"
        )

    # ============================================================
    #  HANDLERS REGISTRATION
    # ============================================================

    def register_handlers(self):
        dp = self.dp

        # --- –ö–æ–º–∞–Ω–¥—ã ---
        dp.message.register(self.start_handler, Command("start"))

        # --- –ö–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–≤–æ–¥—ã ---
        dp.message.register(self.settings_cmd, self._text_contains(["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]))
        dp.message.register(self.status_cmd, self._text_contains(["—Å—Ç–∞—Ç—É—Å"]))
        dp.message.register(self.start_cmd, self._text_contains(["—Å—Ç–∞—Ä—Ç"]))
        dp.message.register(self.stop_cmd, self._text_contains(["—Å—Ç–æ–ø"]))

        # --- –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–æ–ª–µ–π ---
        dp.message.register(
            self.text_message_handler,
            lambda m: self._awaiting_input(m) and m.chat.type == "private"
        )

        # --- CALLBACK-–∫–Ω–æ–ø–∫–∏ (–≤—Å—ë –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ UI:) ---
        dp.callback_query.register(self.settings_handler, F.data == "UI:SETTINGS")
        dp.callback_query.register(self.gate_settings_handler, F.data == "UI:SET_GATE")
        dp.callback_query.register(self.fin_settings_handler, F.data == "UI:SET_FIN")

        dp.callback_query.register(self.fin_soft_menu, F.data == "UI:SET_FIN_SOFT")
        dp.callback_query.register(self.fin_tpair_menu, F.data == "UI:SET_FIN_TPAIR")

        for section in ("soft", "trading pair"):
            upper = section.upper().replace(" ", "_")
            dp.callback_query.register(self._make_field_input(section, "margin_size"), F.data == f"UI:SET_{upper}_MARGIN")
            dp.callback_query.register(self._make_field_input(section, "margin_mode"), F.data == f"UI:SET_{upper}_MARGIN_MODE")
            dp.callback_query.register(self._make_field_input(section, "leverage"), F.data == f"UI:SET_{upper}_LEVERAGE")
            dp.callback_query.register(self._make_field_input(section, "order_type"), F.data == f"UI:SET_{upper}_ORDER_TYPE")
            dp.callback_query.register(self._make_field_input(section, "trigger_order_type"), F.data == f"UI:SET_{upper}_TRIGGER_ORDER_TYPE")
            dp.callback_query.register(self._make_field_input(section, "order_timeout"), F.data == f"UI:SET_{upper}_ORDER_TIMEOUT")
            dp.callback_query.register(self._make_field_input(section, "dop_tp"), F.data == f"UI:SET_{upper}_DOP_TP")

        dp.callback_query.register(self.api_key_input, F.data == "UI:SET_API_KEY")
        dp.callback_query.register(self.secret_key_input, F.data == "UI:SET_SECRET_KEY")


    # ============================================================
    #  BASIC COMMANDS
    # ============================================================

    async def start_handler(self, message: types.Message):
        chat_id = message.chat.id
        self.ensure_user_config(chat_id)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–Ω–∏–∑—É üëá", reply_markup=self.context.main_menu)

    async def settings_cmd(self, message: types.Message):
        chat_id = message.chat.id
        self.ensure_user_config(chat_id)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=self._settings_keyboard())

    async def status_cmd(self, message: types.Message):
        chat_id = message.chat.id
        self.ensure_user_config(chat_id)
        cfg = self.context.users_configs[chat_id]
        status = "–í —Ä–∞–±–æ—Ç–µ" if getattr(self.context, "start_bot_iteration", False) else "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
        pretty_cfg = format_config(cfg.get("config", {}))
        await message.answer(
            f"üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}\n\n‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n{pretty_cfg}",
            reply_markup=self.context.main_menu
        )

    async def start_cmd(self, message: types.Message):
        chat_id = message.chat.id
        self.ensure_user_config(chat_id)

        async with self.bot_iteration_lock:
            # –£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if self.context.start_bot_iteration or any(
                pos.get("in_position", False)
                for symbol_data in self.context.position_vars.values()
                for side, pos in symbol_data.items()
                if side != "spec"
            ):
                await message.answer("–ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏.", reply_markup=self.context.main_menu)
                return

            cfg = self.context.users_configs[chat_id]
            if validate_user_config(cfg):
                self.context.start_bot_iteration = True
                self.context.stop_bot_iteration = False
                await message.answer("‚úÖ –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª.", reply_markup=self.context.main_menu)
            else:
                self.context.start_bot_iteration = False
                await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é", reply_markup=self.context.main_menu)

    async def stop_cmd(self, message: types.Message):
        chat_id = message.chat.id
        self.ensure_user_config(chat_id)

        async with self.bot_iteration_lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            has_open_positions = any(
                pos.get("in_position", False)
                for symbol_data in self.context.position_vars.values()
                for side, pos in symbol_data.items()
                if side != "spec"
            )

            if has_open_positions:
                await message.answer(
                    "‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏.",
                    reply_markup=self.context.main_menu
                )
                return

            # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            if self.context.start_bot_iteration:
                self.context.start_bot_iteration = False
                self.context.stop_bot_iteration = True
                await message.answer(
                    "‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                    reply_markup=self.context.main_menu
                )
            else:
                await message.answer(
                    "‚öôÔ∏è –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
                    reply_markup=self.context.main_menu
                )

    # ============================================================
    #  UTILS
    # ============================================================

    def _text_contains(self, keys: list[str]):
        def _f(message: types.Message) -> bool:
            return bool(message.text and any(k in message.text.lower() for k in keys))
        return _f

    def _awaiting_input(self, message: types.Message) -> bool:
        chat_id = message.chat.id
        cfg = self.context.users_configs.get(chat_id)
        return bool(cfg and cfg.get("_await_field"))

    def ensure_user_config(self, chat_id: int):
        """–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
        if chat_id not in self.context.users_configs:
            self.context.users_configs[chat_id] = copy.deepcopy(INIT_USER_CONFIG)
            self.context.queues_msg[chat_id] = []

    # ============================================================
    #  KEYBOARDS
    # ============================================================

    def _settings_keyboard(self):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîë GATE", callback_data="UI:SET_GATE")],
            [InlineKeyboardButton(text="üí∞ FIN SETTINGS", callback_data="UI:SET_FIN")]
        ])

    def _gate_keyboard(self):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="API Key", callback_data="UI:SET_API_KEY")],
            [InlineKeyboardButton(text="Secret Key", callback_data="UI:SET_SECRET_KEY")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="UI:SETTINGS")]
        ])

    def _fin_keyboard(self):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="Trading Pair", callback_data="UI:SET_FIN_TPAIR")],
            [InlineKeyboardButton(text="Soft", callback_data="UI:SET_FIN_SOFT")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="UI:SETTINGS")]
        ])

    def _fin_branch_keyboard(self, section: str):
        prefix = section.upper().replace(" ", "_")
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="margin size", callback_data=f"UI:SET_{prefix}_MARGIN")],
            [InlineKeyboardButton(text="margin mode", callback_data=f"UI:SET_{prefix}_MARGIN_MODE")],
            [InlineKeyboardButton(text="leverage", callback_data=f"UI:SET_{prefix}_LEVERAGE")],
            [InlineKeyboardButton(text="order type", callback_data=f"UI:SET_{prefix}_ORDER_TYPE")],
            [InlineKeyboardButton(text="trigger order type", callback_data=f"UI:SET_{prefix}_TRIGGER_ORDER_TYPE")],
            [InlineKeyboardButton(text="order timeout", callback_data=f"UI:SET_{prefix}_ORDER_TIMEOUT")],
            [InlineKeyboardButton(text="dop tp", callback_data=f"UI:SET_{prefix}_DOP_TP")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="UI:SET_FIN")]
        ])

    # ============================================================
    #  CALLBACK HANDLERS (–í–°–ï–ì–î–ê chat_id!)
    # ============================================================

    async def settings_handler(self, callback: types.CallbackQuery):
        await callback.answer()
        chat_id = callback.message.chat.id
        self.ensure_user_config(chat_id)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=self._settings_keyboard())

    async def gate_settings_handler(self, callback: types.CallbackQuery):
        await callback.answer()
        chat_id = callback.message.chat.id
        self.ensure_user_config(chat_id)
        await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ GATE:", reply_markup=self._gate_keyboard())

    async def fin_settings_handler(self, callback: types.CallbackQuery):
        await callback.answer()
        chat_id = callback.message.chat.id
        self.ensure_user_config(chat_id)
        await callback.message.edit_text("FIN SETTINGS:", reply_markup=self._fin_keyboard())

    async def fin_soft_menu(self, callback: types.CallbackQuery):
        await callback.answer()
        chat_id = callback.message.chat.id
        self.ensure_user_config(chat_id)
        await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ FIN SETTINGS / Soft:", reply_markup=self._fin_branch_keyboard("soft"))

    async def fin_tpair_menu(self, callback: types.CallbackQuery):
        await callback.answer()
        chat_id = callback.message.chat.id
        self.ensure_user_config(chat_id)
        await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ FIN SETTINGS / Trading Pair:", reply_markup=self._fin_branch_keyboard("trading pair"))

    # ============================================================
    #  DYNAMIC FIELD INPUT
    # ============================================================

    def _make_field_input(self, section: str, field: str):
        async def handler(callback: types.CallbackQuery):
            if not callback.data.startswith("UI:"):
                return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á—É–∂–∏–µ –∫–æ–ª–±—ç–∫–∏
            
        async def handler(callback: types.CallbackQuery):
            await callback.answer()
            chat_id = callback.message.chat.id
            self.ensure_user_config(chat_id)

            # –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≤ —á–∞—Ç–µ chat_id
            self.context.users_configs[chat_id]["_await_field"] = {
                "section": f"fin_settings.{section}",
                "field": field
            }

            # –ø–æ–¥—Å–∫–∞–∑–∫–∏
            tips = {
                "order_type": "–¢–∏–ø –æ—Ä–¥–µ—Ä–∞: 1 ‚Äî –ª–∏–º–∏—Ç–Ω—ã–π, 2 ‚Äî –ø–æ –º–∞—Ä–∫–µ—Ç—É.",
                "trigger_order_type": "–¢–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: 1 ‚Äî –ª–∏–º–∏—Ç–Ω—ã–π, 2 ‚Äî –ø–æ –º–∞—Ä–∫–µ—Ç—É.",
                "margin_mode": "–†–µ–∂–∏–º –º–∞—Ä–∂–∏: 1 ‚Äî –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, 2 ‚Äî –∫—Ä–æ—Å—Å.",
            }
            hint = tips.get(field, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            if field == "dop_tp":
                hint += " (1 - 100+)"
            await callback.message.answer(f"{hint}\n–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field} ({section}):")
        return handler

    # ============================================================
    #  TEXT INPUT HANDLER (–æ–∂–∏–¥–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    # ============================================================

    async def text_message_handler(self, message: types.Message):
        chat_id = message.chat.id
        self.ensure_user_config(chat_id)
        cfg = self.context.users_configs[chat_id]
        field_info = cfg.get("_await_field")
        if not field_info:
            return  # –Ω–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è

        section = field_info["section"]
        field = field_info["field"]
        raw = (message.text or "").strip()

        if section.startswith("fin_settings."):
            _, sub = section.split(".", 1)
            fs = cfg["config"].setdefault("fin_settings", {}).setdefault(sub, {})
        else:
            fs = cfg["config"].setdefault(section, {})

        try:
            if field in ("leverage", "order_timeout", "order_type", "trigger_order_type", "margin_mode"):
                fs[field] = int(raw)
            elif field in ("margin_size", "dop_tp"):
                fs[field] = float(raw.replace(",", "."))
            else:
                fs[field] = raw
        except Exception as e:
            self.info_handler.debug_error_notes(f"[text_message_handler] Error parsing {field}: {e}")
            await message.answer(f"‚ùó –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(e)}")
            return

        cfg["_await_field"] = None  # –æ—á–∏—Å—Ç–∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ

        # –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if field == "order_type":
            msg = "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏–º–∏—Ç–Ω—ã–π —Ç–∏–ø –≤—Ö–æ–¥–∞" if fs[field] == 1 else "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä—ã–Ω–æ—á–Ω—ã–π —Ç–∏–ø –≤—Ö–æ–¥–∞"
        elif field == "trigger_order_type":
            msg = "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ª–∏–º–∏—Ç–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä-–æ—Ä–¥–µ—Ä–∞" if fs[field] == 1 else "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä-–æ—Ä–¥–µ—Ä–∞"
        elif field == "margin_mode":
            msg = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏: –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π" if fs[field] == 1 else "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏: –∫—Ä–æ—Å—Å"
        else:
            msg = f"‚úÖ {field} –¥–ª—è {section} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"

        await message.answer(msg, reply_markup=self.context.main_menu)

        if validate_user_config(cfg):
            await message.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω!", reply_markup=self.context.main_menu)
        else:
            self.context.start_bot_iteration = False

    # ============================================================
    #  GATE INPUT
    # ============================================================

    async def api_key_input(self, callback: types.CallbackQuery):
        await callback.answer()
        chat_id = callback.message.chat.id
        self.ensure_user_config(chat_id)

        if getattr(self.context, "start_bot_iteration", False):
            await callback.message.answer(
                "‚ùó –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ (–∫–æ–º–∞–Ω–¥–∞ –°–¢–û–ü), —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å API Key.",
                reply_markup=self.context.main_menu
            )
            return

        self.context.users_configs[chat_id]["_await_field"] = {"section": "GATE", "field": "api_key"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API Key:")

    async def secret_key_input(self, callback: types.CallbackQuery):
        await callback.answer()
        chat_id = callback.message.chat.id
        self.ensure_user_config(chat_id)

        if getattr(self.context, "start_bot_iteration", False):
            await callback.message.answer(
                "‚ùó –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ (–∫–æ–º–∞–Ω–¥–∞ –°–¢–û–ü), —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å Secret Key.",
                reply_markup=self.context.main_menu
            )
            return

        self.context.users_configs[chat_id]["_await_field"] = {"section": "GATE", "field": "api_secret"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Secret Key:")


    # ============================================================
    #  INLINE START / STOP BUTTONS
    # ============================================================

    async def start_button(self, callback: types.CallbackQuery):
        await callback.answer()
        chat_id = callback.message.chat.id
        self.ensure_user_config(chat_id)

        cfg = self.context.users_configs[chat_id]
        if validate_user_config(cfg):
            self.context.start_bot_iteration = True
            self.context.stop_bot_iteration = False
            await callback.message.answer(
                "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
                reply_markup=self.context.main_menu
            )
        else:
            self.context.start_bot_iteration = False
            await callback.message.answer(
                "‚ùó –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
                reply_markup=self.context.main_menu
            )

    async def stop_button(self, callback: types.CallbackQuery):
        
        await callback.answer()
        chat_id = callback.message.chat.id
        self.ensure_user_config(chat_id)

        # –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏?
        if any(
            pos.get("in_position", False)
            for symbol_data in self.context.position_vars.values()
            for side, pos in symbol_data.items()
            if side != "spec"
        ):
            await callback.message.answer("–°–ø–µ—Ä–≤–∞ –∑–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏.", reply_markup=self.context.main_menu)
            return

        if self.context.start_bot_iteration:
            self.context.start_bot_iteration = False
            self.context.stop_bot_iteration = True
            await callback.message.answer("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=self.context.main_menu)
        else:
            await callback.message.answer("–î–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ—Å–∫–æ–ª—å–∫—É —Ç–æ—Ä–≥–æ–≤–ª—è –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞.", reply_markup=self.context.main_menu)

    # ============================================================
    #  RUN / STOP
    # ============================================================

    async def run(self):
        self._polling_task = asyncio.create_task(
            self.dp.start_polling(self.bot, stop_signal=lambda: self._stop_flag)
        )
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ loop
        await asyncio.sleep(0.1)

    async def stop(self):
        self._stop_flag = True
        if self._polling_task:
            try:
                await asyncio.wait_for(self._polling_task, timeout=2.0)
            except Exception:
                pass
